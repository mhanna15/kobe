Kobe {
  Program   = Statement+
  Statement = Type id "=" Exp                                       -- vardec
            | Type job id "(" Params ")" JobChunk                   -- fundec
            | job id "(" Params ")" JobChunk                        -- voidfundec
            | id "=" Exp                                            -- assign
            | "print" Exp                                           -- print
            | if Exp Chunk ("elif" Exp Chunk)*                      -- if
            | coil Until Chunk				                              -- loop
            | grindUntil Exp Chunk                                  -- while
            | sqrt "(" Exp ")"	                                    -- sqrt
            | reps"(" Exp ")" Chunk	                                -- repeat
            | "output" Exp                                          -- return
            | Increment 
            | Call
  JobChunk  = "{" Statement* (Statement)?"}"         
  Chunk     = "{" Statement* "}"
  Until     = "(" Type id"," Range ")"
  Range     =  Exp "to" Exp  

  Exp       = ("-" | "!") Exp8                        -- unary
            | Exp1
  Exp1      = Exp1 "or" Exp2                          -- binary
            | Exp2
  Exp2      = Exp2 "and" Exp3                          -- binary
            | Exp3
  Exp3      = Exp3 compare Exp4                                     -- binary
            | Exp4
  Exp4      = Exp4 ("plusequal" | "minusequal") Exp5                   -- binary            
            | Exp5
  Exp5      = Exp5 ("add" | "minus") Exp6 -- binary
            | Exp6
  Exp6      = Exp6  ("multiply" | "divide" | "mod") Exp7              -- binary
            | Exp7

  Exp7       = Exp7 "to the" Exp8                                    -- binary
  			    | sqrt Exp8 										                        -- unary
            | Exp8

  Exp8       = num
            | baal
            | id
            | quote
            | "(" Exp ")"                                           -- parens

  
  Call      = id "(" Args ")"
  Params    = ListOf<IndivID, ",">
  IndivID   = Type id
  Args      = ListOf<Exp, ",">
 
 
  Type      = "num"
            | "quote"
            | "baal"
            
  keyword   = reps | job | grindUntil | or | and | output | if | coil

  job       = "job" ~idchar
  output    = "output" ~idchar
  if        = "if" ~idchar
  reps      = "reps" ~idchar
  coil      = "coil" ~idchar
  grindUntil= "grindUntil" ~idchar
  print     = "print" ~idchar
  sqrt      = "sqrt" ~idchar
  or        = "or" ~idchar
  and       = "and" ~idchar
  prelogic  = ("!" | "-")


  compare  = ("<" | ">" |"==" | "!=")

  baal      = "true" | "false"
  num       = digit+ ("." digit+)?
  quote     = "\"" (~"\\" ~"\"" ~"\n" any )* "\""
  id        = ~keyword letter idchar*
  Increment = id ("++" | "--")
  idchar    = letter | digit | "_"
  space    += "//" (~"\n" any)* ("\n" | end)                        -- comment
}